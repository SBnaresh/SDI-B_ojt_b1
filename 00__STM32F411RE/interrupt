/*
 * TOGGLE LED ON BUTTON PRESSED WITH FALLING EDGE USING REGISTER
 * OUTPUT DEVICE -> LED I.E. PA5
 * INPUT DEVICE -> SWITCH I.E. PC13
 */
#include<stdint.h>

#include "main.h"

void delay(int T)
{

	while(T--)
	{
		for(int i=0;i<3000;i++);
	}

}

/*
 * ENABLE CLOCK FOR SYSCFG
 */
LED_Init()
{
	RCC->AHB1ENR |= 0X1;
	GPIOA->MODER |= 0X400;

}
void Button_Init()
{
	RCC->AHB1ENR |= 0X4;
	GPIOA->MODER |= 0X0;
}
/*void Toggle_pin()
{
	GPIOA->ODR ^= 0X20;
	delay(100);
}*/

/* isr subroutine */
void EXTIhello(void)
{
	GPIOA->ODR ^= 0X20; //TOGGLE LED
	for(int i=0;i<10000;i++); //DELAY
	EXTI->PR |= 0X2000; //JUMP BACK TO ISR TO MAIN PROGRAM

}
int main()
{
	__disable_irq(); //disables interrupts
	LED_Init();
	Button_Init();

	/*
	 * ENABLE CLOCK FOR SYSCFG
	 * ALL SYSCOFG IS ON AHB2 BUS FOR INTERRUPT */

	RCC->APB2ENR |= 0X4000; //REFERENCE MANUAL PG-121, TO ENABLE 'SYSCFG EN' RESPONSIBLE FOR ...
	SYSCFG->EXTICR[3] |= 0X20; //REFERNCE MANUAL PG-142,(7.2.6) FOR EXTICR4 = EXTICR[3] BCZ WE R USING PC13 (PC[x]=0010 and EXTI13=PC13) I.E. 0010 0000
	EXTI->IMR  |=0X2000; // Interrupt request from line x is not masked
	EXTI->FTSR |=0X2000;
	NVIC_EnableIRQ(EXTI15_10_IRQn);//WILL ENABLE INTERRUPT LINE 10 TO 15 BCZ WE R USING PC13 ,SO 13 COMES UNDER 10-15
	__enable_irq();


	while(1)
	{
		//Toggle_pin();
	}


}
